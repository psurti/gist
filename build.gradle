/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.3.1/userguide/tutorial_java_projects.html
 */
plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'com.adarshr.test-logger' version '2.0.0'
    //id 'com.github.blindpirate.gogradle' version '0.11.4'
    id "me.champeau.gradle.jmh" version "0.5.0"
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

apply from: 'modules/jackson.gradle'
apply from: 'modules/spring.gradle'
apply from: 'modules/test.gradle'
apply from: 'modules/git.gradle'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.guava:guava:27.0.1-jre'

    implementation 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'


    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

def styler = 'black red green yellow blue magenta cyan white'
        .split().toList().withIndex(30)
        .collectEntries { key, val -> [(key): { "\033[${val}m${it}\033[0m" }] }

def inputFiles = project.fileTree(dir: "src", include: "**/*.java")

/**
 * RunWith: gradle -ai test --continuous
 */
test {
    //JUnit5
    useJUnitPlatform()

    //inputFiles.each { println it }
    def app = inputFiles.sort{ it.lastModified() }.reverse().get(0)
    def idx = app.toString().indexOf("java\\")
    app =  app.toString().substring(idx+5)
    def appName = app.replace(".java","")
    println "${styler['yellow']("[Execute(test): "+ appName +"]")}"

    //Run all tests when building else only last modified test
    if (project.gradle.startParameter.taskNames.contains("build"))
        include '**'
    else
        include appName + '**'

    testlogger {
        slowThreshold 0
        showPassed = true
        showSummary = true
        showStandardStreams = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
/**
 * RunWith: gradle -ai runx --continuous
 */
project.task("runx", type: JavaExec)  {
    inputs.files(inputFiles)
    def allInputFiles = inputs.getFiles().getFiles()
    //allInputFiles.each { println it }
    def app = allInputFiles.sort{ it.lastModified() }.reverse().get(0)
    def idx = app.toString().indexOf("java\\")
    app =  app.toString().substring(idx+5)
    def appName = app.replaceAll("\\\\", ".").replace(".java","")
    println "${styler['yellow']("[Execute(main): "+ appName +"]")}"

    classpath = sourceSets.main.runtimeClasspath
    main = appName
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}